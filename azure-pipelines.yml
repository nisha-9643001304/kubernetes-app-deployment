trigger:
- main

resources:
- repo: self #The self keyword refers to the current repository. It allows the pipeline to access its own repository.

variables: #Variables store reusable values. imageRepo is set to sampleapp, which represents the repository name in your Azure Container Registry (ACR).
  imageRepo: sampleapp
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'K8SExamplesACR'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1 #After the image is built, Kubernetes manifests (such as deployment and service definitions) are published as pipeline artifacts, making them available for the deployment stage.
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sexamplesacrauth #A secret containing credentials for the ACR.
    acrdevurl: 'k8sexamplesacr.azurecr.io' #The URL of the ACR (Azure Container Registry).
    replicaNo: 3 #The number of replicas (3 in this case).
  jobs: 
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'k8sdev.default'
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2 #The deployment job pulls the Kubernetes manifest artifacts created in the build stage.
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'  
              dockerRegistryEndpoint: 'K8SExamplesACR'
          # - task: replacetokens@3
          #   displayName: Replace Tokens
          #   inputs:
          #     rootDirectory: '$(Pipeline.Workspace)/manifests/'
          #     targetFiles: 'deployment.yml'
          #     encoding: 'auto'
          #     writeBOM: true
          #     actionOnMissing: 'warn'
          #     keepToken: false
          #     tokenPrefix: '#'
          #     tokenSuffix: '#'
          #     useLegacyPattern: false
          #     enableTransforms: false
          #     enableTelemetry: true
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(acrdevurl)/$(imageRepo):$(tag)'
              imagePullSecrets: '$(acrsecret)'
